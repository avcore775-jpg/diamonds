generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  role               UserRole            @default(CUSTOMER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isActive           Boolean             @default(true)
  lastLogin          DateTime?
  phone              String?
  password           String?
  accounts           Account[]
  addresses          Address[]
  cart               Cart?
  cartItems          CartItem[]
  emailVerifications EmailVerification[]
  orders             Order[]
  passwordResets     PasswordReset[]
  reviews            Review[]
  sessions           Session[]
  wishlist           Wishlist?
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model Collection {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  featured    Boolean   @default(false)
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([slug])
  @@index([featured])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([slug])
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String
  carat         Float?
  weight        Float?
  price         Int
  image         String
  stock         Int            @default(0)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categoryId    String?
  comparePrice  Int?
  images        String[]
  isFeatured    Boolean        @default(false)
  reserved      Int            @default(0)
  sku           String?        @unique
  tags          String[]
  collectionId  String?
  cartItems     CartItem[]
  orderItems    OrderItem[]
  priceHistory  PriceHistory[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  collection    Collection?    @relation(fields: [collectionId], references: [id])
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@index([slug])
  @@index([isActive])
  @@index([categoryId])
  @@index([collectionId])
  @@index([sku])
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  price     Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType @default(SHIPPING)
  isDefault  Boolean     @default(false)
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  couponId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String?
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
}

model Coupon {
  id         String     @id @default(cuid())
  code       String     @unique
  type       CouponType
  value      Int
  minAmount  Int?
  usageLimit Int?
  usageCount Int        @default(0)
  userLimit  Int?
  validFrom  DateTime
  validUntil DateTime
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  carts      Cart[]
  orders     Order[]

  @@index([code])
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
}

model Order {
  id                    String        @id @default(cuid())
  userId                String
  stripeSessionId       String?       @unique
  stripePaymentIntentId String?       @unique
  status                OrderStatus   @default(PENDING)
  total                 Int
  shippingAddress       Json
  billingAddress        Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  cancelReason          String?
  cancelledAt           DateTime?
  couponId              String?
  deliveredAt           DateTime?
  discount              Int           @default(0)
  notes                 String?
  orderNumber           String        @unique
  paymentStatus         PaymentStatus @default(PENDING)
  shippedAt             DateTime?
  shipping              Int           @default(0)
  subtotal              Int
  tax                   Int           @default(0)
  trackingNumber        String?
  coupon                Coupon?       @relation(fields: [couponId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])
  orderItems            OrderItem[]

  @@index([stripeSessionId])
  @@index([status])
  @@index([orderNumber])
  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  discount  Int     @default(0)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
}

enum UserRole {
  CUSTOMER
  ADMIN
  MANAGER
  SUPPORT
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  CONFIRMED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum CouponType {
  PERCENTAGE
  FIXED
}
